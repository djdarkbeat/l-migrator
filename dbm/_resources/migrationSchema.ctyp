<?lassoscript

define_type:'tableSchema';

	local:
		'dbName' 		= string,
		'tableNames' 	= array,
		'tableType'		= string,
		'charSet'		= string,
		'primaryKey'	= string,
		'uniqueKey'		= string,
		'indices'		= string,
		'fieldRows'		= array;

//==============================================================================
//	->onCreate
//	
//
//------------------------------------------------------------------------------

define_tag:'onCreate',
	-required = 'dbName';
	(self->'dbName') = #dbName;
/define_tag;


//==============================================================================
//	->getSchemaFor
//	
//
//------------------------------------------------------------------------------

define_tag:'getSchemaFor',
	-required = 'tableName';

	local:
		'rawSchema'	= string,
		'fieldRows'	= array,
		'thisField' = string,
		'fieldName' = string,
		'fieldInfo'	= string,
		'fieldNull' = string,
		'fieldDflt' = string;
		
	(self->'fieldRows') = array;

	inline: 
		-database	= (self->'dbName'), 
		-sql		= 'SHOW CREATE TABLE `' + (encode_sql:#tableName) + '`';

		#rawSchema = field:(field_names->second);
		#fieldRows = #rawSchema->(split:'\n');

//	acquire non-field information

		(self->'tableType')	 = (string_findRegExp: #rawSchema, -find='ENGINE=(\\w+)', -ignorecase)->last;
		(self->'charSet')	 = (string_findRegExp: #rawSchema, -find='CHARSET=(\\w+)', -ignorecase)->last;
		(self->'primaryKey') = (string_findRegExp: #rawSchema, -find='PRIMARY KEY\\s+\\(`(\\w+)`\\)', -ignorecase)->last;

//	---------------------------------------
//	grab unique keys 
//	more than one is possible

		(self->'uniqueKey') = (string_findRegExp: #rawSchema, -find='UNIQUE KEY\\s+`\\w+`\\s+\\(([`\\w\\d\\s,]+)\\)', -ignorecase);

		if: (self->'uniqueKey')->size > 0;

//	now remove odd elements of array which Lasso gives us, but we don`t want

			loop: -from=(self->'uniqueKey')->size, -to=1, -loopincrement=(-1);
				if: loop_count%2 != 0;
					(self->'uniqueKey')->(remove:loop_count);
				/if;
			/loop;

//	now remove all ` and ( and ) and space characters 

			(self->'uniqueKey') = (self->'uniqueKey')->(join:',');
			(self->'uniqueKey')->(replace:'`', '');
			(self->'uniqueKey')->(replace:'(', '');
			(self->'uniqueKey')->(replace:')', '');
			(self->'uniqueKey')->(replace:',', ', ');
		else;
			(self->'uniqueKey') = string;
		/if;

//	---------------------------------------
//	grab index fields
//	more than one is possible

// replace these phrases to eliminate these keys from showing up in the indices array

		#rawSchema->(replace:'PRIMARY KEY', 'PK');
		#rawSchema->(replace:'UNIQUE KEY', 'UK');

		(self->'indices') = (string_findRegExp: #rawSchema, -find='KEY\\s+`\\w+`\\s+\\(([`\\w\\d\\s,]+)\\)', -ignorecase);

		if: (self->'indices')->size > 0;

//	now remove odd elements of array which Lasso gives us, but we don`t want

			loop: -from=(self->'indices')->size, -to=1, -loopincrement=(-1);
				if: loop_count%2 != 0;
					(self->'indices')->(remove:loop_count);
				/if;
			/loop;

//	now remove all ` and ( and ) and space characters 

			(self->'indices') = (self->'indices')->(join:',');
			(self->'indices')->(replace:'`', '');
			(self->'indices')->(replace:'(', '');
			(self->'indices')->(replace:')', '');
			(self->'indices')->(replace:',', ', ');
		else;
			(self->'indices') = string;
		/if;

//	---------------------------------------
//	finally grab all field definition info

		iterate: #fieldRows, #thisField;

			#thisField->trim;
			
			if: #thisField->(beginswith:'`');
				#fieldName = (string_findRegExp: #thisField, -find='`(\\w+)`', -ignoreCase)->last;
				#fieldNull = (string_findRegExp: #thisField, -find='(NULL|NOT NULL)', -ignoreCase)->last;
				#fieldDflt = (string_findRegExp: #thisField, -find='default \\\'([a-zA-Z0-9.]+)\\\'', -ignoreCase)->last;
			
				#fieldInfo = (string_replaceRegExp: 
					#thisField, 
					-find ='`(\\w+)`', 
					-replace = '',
					-ignoreCase);

				#fieldInfo = (string_replaceRegExp: 
					#fieldInfo, 
					-find = '(NULL|NOT NULL)', 
					-replace = '',
					-ignoreCase);
			
				#fieldInfo = (string_replaceRegExp: 
					#fieldInfo, 
					-find = 'default \'' + #fieldDflt + '\'', 
					-replace = '',
					-ignoreCase);
			
				#fieldInfo->trim;
				#fieldInfo->(removetrailing:',');
			
				(self->'fieldRows')->(insert: (map:
					'name' = #fieldName,
					'info' = #fieldInfo,
					'null' = #fieldNull,
					'dflt' = #fieldDflt));
					
			/if;
		/iterate;
	/inline;
/define_tag;

/define_type;
?>

